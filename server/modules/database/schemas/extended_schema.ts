import { pgTable, text, integer, boolean, timestamp, uuid, decimal, jsonb, varchar, bigint, smallint, real, doublePrecision, date, time, interval, bytea, char, serial, bigserial, index, uniqueIndex } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';

// ============================================================================
// CONTENT & DOCUMENT MANAGEMENT
// ============================================================================

export const documents = pgTable("documents", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  originalName: varchar("original_name", { length: 255 }),
  type: varchar("type", { length: 50 }).notNull(),
  category: varchar("category", { length: 100 }),
  mimeType: varchar("mime_type", { length: 100 }),
  size: bigint("size", { mode: "number" }),
  path: text("path"),
  url: text("url"),
  thumbnail: text("thumbnail"),
  hash: varchar("hash", { length: 128 }),
  version: integer("version").default(1),
  status: varchar("status", { length: 50 }).default("active"),
  visibility: varchar("visibility", { length: 50 }).default("private"),
  ownerId: uuid("owner_id").notNull(),
  organizationId: uuid("organization_id"),
  parentId: uuid("parent_id"),
  content: text("content"),
  extractedText: text("extracted_text"),
  summary: text("summary"),
  keywords: jsonb("keywords").default([]),
  tags: jsonb("tags").default([]),
  metadata: jsonb("metadata").default({}),
  permissions: jsonb("permissions").default({}),
  encryption: jsonb("encryption").default({}),
  backup: jsonb("backup").default({}),
  analytics: jsonb("analytics").default({}),
  downloadCount: bigint("download_count", { mode: "number" }).default(0),
  viewCount: bigint("view_count", { mode: "number" }).default(0),
  lastAccessed: timestamp("last_accessed"),
  expiresAt: timestamp("expires_at"),
  archivedAt: timestamp("archived_at"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const documentVersions = pgTable("document_versions", {
  id: uuid("id").primaryKey().defaultRandom(),
  documentId: uuid("document_id").notNull(),
  version: integer("version").notNull(),
  name: varchar("name", { length: 255 }),
  size: bigint("size", { mode: "number" }),
  path: text("path"),
  hash: varchar("hash", { length: 128 }),
  changes: text("changes"),
  changeLog: jsonb("change_log").default({}),
  createdBy: uuid("created_by").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
  metadata: jsonb("metadata").default({}),
});

export const templates = pgTable("templates", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  type: varchar("type", { length: 50 }).notNull(),
  category: varchar("category", { length: 100 }),
  version: varchar("version", { length: 20 }).default("1.0"),
  content: text("content").notNull(),
  variables: jsonb("variables").default({}),
  schema: jsonb("schema").default({}),
  preview: text("preview"),
  isPublic: boolean("is_public").default(false),
  isActive: boolean("is_active").default(true),
  usageCount: bigint("usage_count", { mode: "number" }).default(0),
  rating: real("rating").default(0),
  tags: jsonb("tags").default([]),
  requirements: jsonb("requirements").default({}),
  instructions: text("instructions"),
  examples: jsonb("examples").default({}),
  metadata: jsonb("metadata").default({}),
  createdBy: uuid("created_by").notNull(),
  organizationId: uuid("organization_id"),
  parentId: uuid("parent_id"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// ============================================================================
// COMMUNICATION & MESSAGING
// ============================================================================

export const conversations = pgTable("conversations", {
  id: uuid("id").primaryKey().defaultRandom(),
  title: varchar("title", { length: 255 }),
  type: varchar("type", { length: 50 }).notNull(),
  status: varchar("status", { length: 50 }).default("active"),
  priority: varchar("priority", { length: 20 }).default("normal"),
  category: varchar("category", { length: 100 }),
  participants: jsonb("participants").default([]),
  settings: jsonb("settings").default({}),
  lastMessageId: uuid("last_message_id"),
  lastActivity: timestamp("last_activity").defaultNow(),
  messageCount: integer("message_count").default(0),
  unreadCount: jsonb("unread_count").default({}),
  isArchived: boolean("is_archived").default(false),
  isLocked: boolean("is_locked").default(false),
  metadata: jsonb("metadata").default({}),
  createdBy: uuid("created_by").notNull(),
  organizationId: uuid("organization_id"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const messages = pgTable("messages", {
  id: uuid("id").primaryKey().defaultRandom(),
  conversationId: uuid("conversation_id").notNull(),
  senderId: uuid("sender_id").notNull(),
  type: varchar("type", { length: 50 }).default("text"),
  content: text("content"),
  subject: varchar("subject", { length: 500 }),
  status: varchar("status", { length: 50 }).default("sent"),
  priority: varchar("priority", { length: 20 }).default("normal"),
  replyToId: uuid("reply_to_id"),
  threadId: uuid("thread_id"),
  attachments: jsonb("attachments").default([]),
  mentions: jsonb("mentions").default([]),
  reactions: jsonb("reactions").default({}),
  readBy: jsonb("read_by").default({}),
  deliveredTo: jsonb("delivered_to").default({}),
  editHistory: jsonb("edit_history").default([]),
  isEdited: boolean("is_edited").default(false),
  isDeleted: boolean("is_deleted").default(false),
  isImportant: boolean("is_important").default(false),
  scheduledFor: timestamp("scheduled_for"),
  expiresAt: timestamp("expires_at"),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const notifications = pgTable("notifications", {
  id: uuid("id").primaryKey().defaultRandom(),
  userId: uuid("user_id").notNull(),
  type: varchar("type", { length: 50 }).notNull(),
  title: varchar("title", { length: 255 }).notNull(),
  message: text("message"),
  category: varchar("category", { length: 100 }),
  priority: varchar("priority", { length: 20 }).default("normal"),
  status: varchar("status", { length: 50 }).default("unread"),
  actionUrl: text("action_url"),
  actionData: jsonb("action_data").default({}),
  channels: jsonb("channels").default([]),
  deliveryStatus: jsonb("delivery_status").default({}),
  readAt: timestamp("read_at"),
  dismissedAt: timestamp("dismissed_at"),
  expiresAt: timestamp("expires_at"),
  sourceId: text("source_id"),
  sourceType: varchar("source_type", { length: 50 }),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
});

// ============================================================================
// ANALYTICS & REPORTING
// ============================================================================

export const analyticsEvents = pgTable("analytics_events", {
  id: uuid("id").primaryKey().defaultRandom(),
  eventType: varchar("event_type", { length: 100 }).notNull(),
  eventName: varchar("event_name", { length: 100 }).notNull(),
  userId: uuid("user_id"),
  sessionId: text("session_id"),
  organizationId: uuid("organization_id"),
  resourceId: text("resource_id"),
  resourceType: varchar("resource_type", { length: 50 }),
  action: varchar("action", { length: 100 }),
  category: varchar("category", { length: 100 }),
  label: varchar("label", { length: 255 }),
  value: decimal("value", { precision: 15, scale: 2 }),
  properties: jsonb("properties").default({}),
  context: jsonb("context").default({}),
  device: jsonb("device").default({}),
  location: jsonb("location").default({}),
  referrer: text("referrer"),
  userAgent: text("user_agent"),
  ipAddress: varchar("ip_address", { length: 45 }),
  timestamp: timestamp("timestamp").defaultNow(),
  processedAt: timestamp("processed_at"),
  metadata: jsonb("metadata").default({}),
});

export const reports = pgTable("reports", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  type: varchar("type", { length: 50 }).notNull(),
  category: varchar("category", { length: 100 }),
  status: varchar("status", { length: 50 }).default("draft"),
  format: varchar("format", { length: 20 }).default("json"),
  visibility: varchar("visibility", { length: 50 }).default("private"),
  schedule: jsonb("schedule").default({}),
  parameters: jsonb("parameters").default({}),
  filters: jsonb("filters").default({}),
  data: jsonb("data").default({}),
  charts: jsonb("charts").default({}),
  summary: text("summary"),
  insights: jsonb("insights").default({}),
  recommendations: jsonb("recommendations").default({}),
  recipients: jsonb("recipients").default([]),
  lastGenerated: timestamp("last_generated"),
  nextGeneration: timestamp("next_generation"),
  generationCount: integer("generation_count").default(0),
  downloadCount: integer("download_count").default(0),
  shareCount: integer("share_count").default(0),
  isAutomated: boolean("is_automated").default(false),
  isPublic: boolean("is_public").default(false),
  metadata: jsonb("metadata").default({}),
  createdBy: uuid("created_by").notNull(),
  organizationId: uuid("organization_id"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const dashboards = pgTable("dashboards", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  type: varchar("type", { length: 50 }).default("custom"),
  category: varchar("category", { length: 100 }),
  layout: jsonb("layout").notNull(),
  widgets: jsonb("widgets").default([]),
  filters: jsonb("filters").default({}),
  settings: jsonb("settings").default({}),
  permissions: jsonb("permissions").default({}),
  isPublic: boolean("is_public").default(false),
  isDefault: boolean("is_default").default(false),
  isTemplate: boolean("is_template").default(false),
  viewCount: bigint("view_count", { mode: "number" }).default(0),
  shareCount: integer("share_count").default(0),
  lastViewed: timestamp("last_viewed"),
  refreshRate: integer("refresh_rate").default(300),
  autoRefresh: boolean("auto_refresh").default(false),
  dataSource: jsonb("data_source").default({}),
  metadata: jsonb("metadata").default({}),
  createdBy: uuid("created_by").notNull(),
  organizationId: uuid("organization_id"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// ============================================================================
// FINANCIAL & ACCOUNTING
// ============================================================================

export const accounts = pgTable("accounts", {
  id: uuid("id").primaryKey().defaultRandom(),
  organizationId: uuid("organization_id").notNull(),
  accountNumber: varchar("account_number", { length: 50 }).unique().notNull(),
  name: varchar("name", { length: 255 }).notNull(),
  type: varchar("type", { length: 50 }).notNull(),
  subType: varchar("sub_type", { length: 50 }),
  category: varchar("category", { length: 100 }),
  parentId: uuid("parent_id"),
  currency: varchar("currency", { length: 10 }).default("USD"),
  balance: decimal("balance", { precision: 15, scale: 2 }).default(0),
  availableBalance: decimal("available_balance", { precision: 15, scale: 2 }),
  pendingBalance: decimal("pending_balance", { precision: 15, scale: 2 }).default(0),
  creditLimit: decimal("credit_limit", { precision: 15, scale: 2 }),
  isActive: boolean("is_active").default(true),
  isReconciled: boolean("is_reconciled").default(false),
  lastReconciled: timestamp("last_reconciled"),
  openingBalance: decimal("opening_balance", { precision: 15, scale: 2 }),
  openingDate: date("opening_date"),
  closingDate: date("closing_date"),
  bankInfo: jsonb("bank_info").default({}),
  restrictions: jsonb("restrictions").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const transactions = pgTable("transactions", {
  id: uuid("id").primaryKey().defaultRandom(),
  organizationId: uuid("organization_id").notNull(),
  accountId: uuid("account_id").notNull(),
  transactionNumber: varchar("transaction_number", { length: 100 }).unique(),
  reference: varchar("reference", { length: 100 }),
  type: varchar("type", { length: 50 }).notNull(),
  category: varchar("category", { length: 100 }),
  subcategory: varchar("subcategory", { length: 100 }),
  description: text("description"),
  amount: decimal("amount", { precision: 15, scale: 2 }).notNull(),
  currency: varchar("currency", { length: 10 }).default("USD"),
  exchangeRate: decimal("exchange_rate", { precision: 10, scale: 6 }),
  baseAmount: decimal("base_amount", { precision: 15, scale: 2 }),
  status: varchar("status", { length: 50 }).default("pending"),
  direction: varchar("direction", { length: 10 }).notNull(),
  payerId: uuid("payer_id"),
  payeeId: uuid("payee_id"),
  paymentMethod: varchar("payment_method", { length: 50 }),
  paymentReference: varchar("payment_reference", { length: 100 }),
  projectId: uuid("project_id"),
  grantId: uuid("grant_id"),
  invoiceId: uuid("invoice_id"),
  receiptId: uuid("receipt_id"),
  tags: jsonb("tags").default([]),
  attachments: jsonb("attachments").default([]),
  reconciliationData: jsonb("reconciliation_data").default({}),
  fees: decimal("fees", { precision: 15, scale: 2 }).default(0),
  taxes: decimal("taxes", { precision: 15, scale: 2 }).default(0),
  netAmount: decimal("net_amount", { precision: 15, scale: 2 }),
  processedAt: timestamp("processed_at"),
  settledAt: timestamp("settled_at"),
  dueDate: date("due_date"),
  valueDate: date("value_date"),
  isRecurring: boolean("is_recurring").default(false),
  recurringPattern: jsonb("recurring_pattern").default({}),
  parentTransactionId: uuid("parent_transaction_id"),
  metadata: jsonb("metadata").default({}),
  createdBy: uuid("created_by").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const budgets = pgTable("budgets", {
  id: uuid("id").primaryKey().defaultRandom(),
  organizationId: uuid("organization_id").notNull(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  type: varchar("type", { length: 50 }).notNull(),
  period: varchar("period", { length: 50 }).notNull(),
  startDate: date("start_date").notNull(),
  endDate: date("end_date").notNull(),
  totalAmount: decimal("total_amount", { precision: 15, scale: 2 }).notNull(),
  allocatedAmount: decimal("allocated_amount", { precision: 15, scale: 2 }).default(0),
  spentAmount: decimal("spent_amount", { precision: 15, scale: 2 }).default(0),
  remainingAmount: decimal("remaining_amount", { precision: 15, scale: 2 }),
  currency: varchar("currency", { length: 10 }).default("USD"),
  status: varchar("status", { length: 50 }).default("draft"),
  categories: jsonb("categories").default({}),
  lineItems: jsonb("line_items").default([]),
  approvals: jsonb("approvals").default({}),
  revisions: jsonb("revisions").default([]),
  variance: jsonb("variance").default({}),
  alerts: jsonb("alerts").default({}),
  parentId: uuid("parent_id"),
  projectId: uuid("project_id"),
  grantId: uuid("grant_id"),
  isTemplate: boolean("is_template").default(false),
  isLocked: boolean("is_locked").default(false),
  metadata: jsonb("metadata").default({}),
  createdBy: uuid("created_by").notNull(),
  approvedBy: uuid("approved_by"),
  approvedAt: timestamp("approved_at"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// ============================================================================
// LEARNING & DEVELOPMENT
// ============================================================================

export const courses = pgTable("courses", {
  id: uuid("id").primaryKey().defaultRandom(),
  title: varchar("title", { length: 255 }).notNull(),
  slug: varchar("slug", { length: 255 }).unique().notNull(),
  description: text("description"),
  summary: text("summary"),
  category: varchar("category", { length: 100 }),
  level: varchar("level", { length: 50 }),
  duration: integer("duration"),
  format: varchar("format", { length: 50 }),
  type: varchar("type", { length: 50 }).default("self-paced"),
  status: varchar("status", { length: 50 }).default("draft"),
  visibility: varchar("visibility", { length: 50 }).default("public"),
  price: decimal("price", { precision: 10, scale: 2 }),
  currency: varchar("currency", { length: 10 }).default("USD"),
  language: varchar("language", { length: 10 }).default("en"),
  prerequisites: jsonb("prerequisites").default([]),
  objectives: jsonb("objectives").default([]),
  outcomes: jsonb("outcomes").default([]),
  syllabus: jsonb("syllabus").default({}),
  resources: jsonb("resources").default([]),
  assessments: jsonb("assessments").default([]),
  certification: jsonb("certification").default({}),
  tags: jsonb("tags").default([]),
  skills: jsonb("skills").default([]),
  rating: real("rating").default(0),
  reviewCount: integer("review_count").default(0),
  enrollmentCount: integer("enrollment_count").default(0),
  completionRate: real("completion_rate").default(0),
  isPublic: boolean("is_public").default(true),
  isFeatured: boolean("is_featured").default(false),
  isActive: boolean("is_active").default(true),
  thumbnail: text("thumbnail"),
  trailer: text("trailer"),
  instructorId: uuid("instructor_id").notNull(),
  organizationId: uuid("organization_id"),
  parentCourseId: uuid("parent_course_id"),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const courseModules = pgTable("course_modules", {
  id: uuid("id").primaryKey().defaultRandom(),
  courseId: uuid("course_id").notNull(),
  title: varchar("title", { length: 255 }).notNull(),
  description: text("description"),
  orderIndex: integer("order_index").notNull(),
  duration: integer("duration"),
  type: varchar("type", { length: 50 }).default("lesson"),
  status: varchar("status", { length: 50 }).default("published"),
  content: text("content"),
  videoUrl: text("video_url"),
  audioUrl: text("audio_url"),
  materials: jsonb("materials").default([]),
  assignments: jsonb("assignments").default([]),
  quiz: jsonb("quiz").default({}),
  prerequisites: jsonb("prerequisites").default([]),
  isRequired: boolean("is_required").default(true),
  isPreview: boolean("is_preview").default(false),
  viewCount: bigint("view_count", { mode: "number" }).default(0),
  completionCount: integer("completion_count").default(0),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const enrollments = pgTable("enrollments", {
  id: uuid("id").primaryKey().defaultRandom(),
  courseId: uuid("course_id").notNull(),
  userId: uuid("user_id").notNull(),
  status: varchar("status", { length: 50 }).default("active"),
  progress: real("progress").default(0),
  completedModules: jsonb("completed_modules").default([]),
  currentModule: uuid("current_module"),
  startDate: timestamp("start_date").defaultNow(),
  lastAccessDate: timestamp("last_access_date"),
  completionDate: timestamp("completion_date"),
  certificateUrl: text("certificate_url"),
  grade: real("grade"),
  attempts: integer("attempts").default(0),
  timeSpent: integer("time_spent").default(0),
  notes: text("notes"),
  feedback: text("feedback"),
  rating: integer("rating"),
  review: text("review"),
  isCompleted: boolean("is_completed").default(false),
  isCertified: boolean("is_certified").default(false),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// ============================================================================
// SYSTEM MONITORING & HEALTH
// ============================================================================

export const systemHealth = pgTable("system_health", {
  id: uuid("id").primaryKey().defaultRandom(),
  service: varchar("service", { length: 100 }).notNull(),
  component: varchar("component", { length: 100 }),
  status: varchar("status", { length: 50 }).notNull(),
  uptime: bigint("uptime", { mode: "number" }),
  responseTime: integer("response_time"),
  errorRate: real("error_rate").default(0),
  throughput: real("throughput"),
  cpuUsage: real("cpu_usage"),
  memoryUsage: real("memory_usage"),
  diskUsage: real("disk_usage"),
  networkIn: bigint("network_in", { mode: "number" }),
  networkOut: bigint("network_out", { mode: "number" }),
  connections: integer("connections"),
  queueSize: integer("queue_size"),
  metrics: jsonb("metrics").default({}),
  alerts: jsonb("alerts").default([]),
  incidents: jsonb("incidents").default([]),
  lastChecked: timestamp("last_checked").defaultNow(),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
});

export const errorLogs = pgTable("error_logs", {
  id: uuid("id").primaryKey().defaultRandom(),
  level: varchar("level", { length: 20 }).notNull(),
  message: text("message").notNull(),
  source: varchar("source", { length: 100 }),
  function: varchar("function", { length: 100 }),
  file: varchar("file", { length: 255 }),
  line: integer("line"),
  userId: uuid("user_id"),
  sessionId: text("session_id"),
  requestId: text("request_id"),
  stackTrace: text("stack_trace"),
  context: jsonb("context").default({}),
  environment: varchar("environment", { length: 50 }),
  version: varchar("version", { length: 50 }),
  userAgent: text("user_agent"),
  ipAddress: varchar("ip_address", { length: 45 }),
  url: text("url"),
  method: varchar("method", { length: 10 }),
  statusCode: integer("status_code"),
  responseTime: integer("response_time"),
  resolved: boolean("resolved").default(false),
  resolvedBy: uuid("resolved_by"),
  resolvedAt: timestamp("resolved_at"),
  resolution: text("resolution"),
  occurrenceCount: integer("occurrence_count").default(1),
  firstOccurrence: timestamp("first_occurrence").defaultNow(),
  lastOccurrence: timestamp("last_occurrence").defaultNow(),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
});

// ============================================================================
// WORKFLOW & PROCESS MANAGEMENT
// ============================================================================

export const workflows = pgTable("workflows", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  type: varchar("type", { length: 50 }).notNull(),
  category: varchar("category", { length: 100 }),
  version: varchar("version", { length: 20 }).default("1.0"),
  status: varchar("status", { length: 50 }).default("draft"),
  isActive: boolean("is_active").default(false),
  isTemplate: boolean("is_template").default(false),
  definition: jsonb("definition").notNull(),
  steps: jsonb("steps").default([]),
  conditions: jsonb("conditions").default({}),
  variables: jsonb("variables").default({}),
  configuration: jsonb("configuration").default({}),
  triggers: jsonb("triggers").default([]),
  schedule: jsonb("schedule").default({}),
  permissions: jsonb("permissions").default({}),
  executionCount: bigint("execution_count", { mode: "number" }).default(0),
  successCount: bigint("success_count", { mode: "number" }).default(0),
  failureCount: bigint("failure_count", { mode: "number" }).default(0),
  averageExecutionTime: integer("average_execution_time"),
  lastExecuted: timestamp("last_executed"),
  nextExecution: timestamp("next_execution"),
  tags: jsonb("tags").default([]),
  metadata: jsonb("metadata").default({}),
  createdBy: uuid("created_by").notNull(),
  organizationId: uuid("organization_id"),
  parentId: uuid("parent_id"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const workflowExecutions = pgTable("workflow_executions", {
  id: uuid("id").primaryKey().defaultRandom(),
  workflowId: uuid("workflow_id").notNull(),
  triggerId: text("trigger_id"),
  status: varchar("status", { length: 50 }).default("running"),
  startTime: timestamp("start_time").defaultNow(),
  endTime: timestamp("end_time"),
  duration: integer("duration"),
  input: jsonb("input").default({}),
  output: jsonb("output").default({}),
  context: jsonb("context").default({}),
  variables: jsonb("variables").default({}),
  currentStep: integer("current_step"),
  completedSteps: jsonb("completed_steps").default([]),
  failedSteps: jsonb("failed_steps").default([]),
  errors: jsonb("errors").default([]),
  warnings: jsonb("warnings").default([]),
  logs: jsonb("logs").default([]),
  retryCount: integer("retry_count").default(0),
  parentExecutionId: uuid("parent_execution_id"),
  childExecutions: jsonb("child_executions").default([]),
  priority: integer("priority").default(5),
  userId: uuid("user_id"),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
});

// Add indexes for performance
export const userSessionsUserIdIndex = index("user_sessions_user_id_idx").on(userSessions.userId);
export const securityAuditLogsUserIdIndex = index("security_audit_logs_user_id_idx").on(securityAuditLogs.userId);
export const documentsOwnerIdIndex = index("documents_owner_id_idx").on(documents.ownerId);
export const messagesConversationIdIndex = index("messages_conversation_id_idx").on(messages.conversationId);
export const analyticsEventsUserIdIndex = index("analytics_events_user_id_idx").on(analyticsEvents.userId);
export const transactionsAccountIdIndex = index("transactions_account_id_idx").on(transactions.accountId);
export const enrollmentsCourseIdIndex = index("enrollments_course_id_idx").on(enrollments.courseId);
export const errorLogsSourceIndex = index("error_logs_source_idx").on(errorLogs.source);
export const workflowExecutionsWorkflowIdIndex = index("workflow_executions_workflow_id_idx").on(workflowExecutions.workflowId);