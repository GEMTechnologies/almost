import { pgTable, text, integer, boolean, timestamp, uuid, decimal, jsonb, varchar, bigint, smallint, real, doublePrecision, date, time, interval, bytea, char, serial, bigserial } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';

// ============================================================================
// CORE SYSTEM TABLES - SECURITY & AUTHENTICATION
// ============================================================================

export const systemUsers = pgTable("system_users", {
  id: uuid("id").primaryKey().defaultRandom(),
  username: varchar("username", { length: 50 }).unique().notNull(),
  email: varchar("email", { length: 255 }).unique().notNull(),
  passwordHash: text("password_hash").notNull(),
  salt: text("salt").notNull(),
  role: varchar("role", { length: 50 }).notNull().default("user"),
  permissions: jsonb("permissions").default({}),
  isActive: boolean("is_active").default(true),
  isVerified: boolean("is_verified").default(false),
  twoFactorEnabled: boolean("two_factor_enabled").default(false),
  twoFactorSecret: text("two_factor_secret"),
  lastLogin: timestamp("last_login"),
  loginAttempts: integer("login_attempts").default(0),
  lockedUntil: timestamp("locked_until"),
  passwordResetToken: text("password_reset_token"),
  passwordResetExpires: timestamp("password_reset_expires"),
  emailVerificationToken: text("email_verification_token"),
  emailVerificationExpires: timestamp("email_verification_expires"),
  profileData: jsonb("profile_data").default({}),
  preferences: jsonb("preferences").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
  deletedAt: timestamp("deleted_at"),
});

export const userSessions = pgTable("user_sessions", {
  id: uuid("id").primaryKey().defaultRandom(),
  userId: uuid("user_id").references(() => systemUsers.id).notNull(),
  sessionToken: text("session_token").unique().notNull(),
  refreshToken: text("refresh_token").unique(),
  ipAddress: varchar("ip_address", { length: 45 }),
  userAgent: text("user_agent"),
  deviceFingerprint: text("device_fingerprint"),
  isActive: boolean("is_active").default(true),
  lastActivity: timestamp("last_activity").defaultNow(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
  revokedAt: timestamp("revoked_at"),
  revokedBy: uuid("revoked_by").references(() => systemUsers.id),
  location: jsonb("location").default({}),
  metadata: jsonb("metadata").default({}),
});

export const securityAuditLogs = pgTable("security_audit_logs", {
  id: uuid("id").primaryKey().defaultRandom(),
  userId: uuid("user_id").references(() => systemUsers.id),
  action: varchar("action", { length: 100 }).notNull(),
  resource: varchar("resource", { length: 100 }),
  resourceId: text("resource_id"),
  ipAddress: varchar("ip_address", { length: 45 }),
  userAgent: text("user_agent"),
  details: jsonb("details").default({}),
  severity: varchar("severity", { length: 20 }).default("info"),
  status: varchar("status", { length: 20 }).default("success"),
  timestamp: timestamp("timestamp").defaultNow(),
  sessionId: uuid("session_id").references(() => userSessions.id),
  metadata: jsonb("metadata").default({}),
});

export const apiKeys = pgTable("api_keys", {
  id: uuid("id").primaryKey().defaultRandom(),
  userId: uuid("user_id").references(() => systemUsers.id).notNull(),
  name: varchar("name", { length: 100 }).notNull(),
  keyHash: text("key_hash").notNull(),
  prefix: varchar("prefix", { length: 20 }).notNull(),
  permissions: jsonb("permissions").default({}),
  rateLimit: integer("rate_limit").default(1000),
  isActive: boolean("is_active").default(true),
  lastUsed: timestamp("last_used"),
  usageCount: bigint("usage_count", { mode: "number" }).default(0),
  expiresAt: timestamp("expires_at"),
  createdAt: timestamp("created_at").defaultNow(),
  revokedAt: timestamp("revoked_at"),
  metadata: jsonb("metadata").default({}),
});

// ============================================================================
// ORGANIZATION & ENTITY MANAGEMENT
// ============================================================================

export const organizations = pgTable("organizations", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  legalName: varchar("legal_name", { length: 255 }),
  type: varchar("type", { length: 50 }).notNull(),
  subType: varchar("sub_type", { length: 50 }),
  registrationNumber: varchar("registration_number", { length: 100 }),
  taxId: varchar("tax_id", { length: 50 }),
  website: text("website"),
  email: varchar("email", { length: 255 }),
  phone: varchar("phone", { length: 50 }),
  description: text("description"),
  mission: text("mission"),
  vision: text("vision"),
  foundedDate: date("founded_date"),
  employeeCount: integer("employee_count"),
  annualRevenue: decimal("annual_revenue", { precision: 15, scale: 2 }),
  industryCode: varchar("industry_code", { length: 20 }),
  status: varchar("status", { length: 50 }).default("active"),
  verificationLevel: integer("verification_level").default(0),
  address: jsonb("address").default({}),
  socialMedia: jsonb("social_media").default({}),
  certifications: jsonb("certifications").default({}),
  partnerships: jsonb("partnerships").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
  createdBy: uuid("created_by").references(() => systemUsers.id),
});

export const organizationMembers = pgTable("organization_members", {
  id: uuid("id").primaryKey().defaultRandom(),
  organizationId: uuid("organization_id").references(() => organizations.id).notNull(),
  userId: uuid("user_id").references(() => systemUsers.id).notNull(),
  role: varchar("role", { length: 50 }).notNull(),
  permissions: jsonb("permissions").default({}),
  department: varchar("department", { length: 100 }),
  title: varchar("title", { length: 100 }),
  isActive: boolean("is_active").default(true),
  joinedAt: timestamp("joined_at").defaultNow(),
  leftAt: timestamp("left_at"),
  metadata: jsonb("metadata").default({}),
});

export const locations = pgTable("locations", {
  id: uuid("id").primaryKey().defaultRandom(),
  organizationId: uuid("organization_id").references(() => organizations.id),
  name: varchar("name", { length: 255 }),
  type: varchar("type", { length: 50 }).notNull(),
  address: jsonb("address").notNull(),
  coordinates: jsonb("coordinates"),
  isHeadquarters: boolean("is_headquarters").default(false),
  isActive: boolean("is_active").default(true),
  contactInfo: jsonb("contact_info").default({}),
  facilities: jsonb("facilities").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
});

// ============================================================================
// FUNDING & FINANCIAL MANAGEMENT
// ============================================================================

export const fundingOpportunities = pgTable("funding_opportunities", {
  id: uuid("id").primaryKey().defaultRandom(),
  title: varchar("title", { length: 500 }).notNull(),
  description: text("description"),
  summary: text("summary"),
  funderId: uuid("funder_id").references(() => funders.id).notNull(),
  category: varchar("category", { length: 100 }),
  subCategory: varchar("sub_category", { length: 100 }),
  type: varchar("type", { length: 50 }).notNull(),
  status: varchar("status", { length: 50 }).default("open"),
  totalAmount: decimal("total_amount", { precision: 15, scale: 2 }),
  minAmount: decimal("min_amount", { precision: 15, scale: 2 }),
  maxAmount: decimal("max_amount", { precision: 15, scale: 2 }),
  currency: varchar("currency", { length: 10 }).default("USD"),
  eligibilityCriteria: jsonb("eligibility_criteria").default({}),
  requirements: jsonb("requirements").default({}),
  applicationDeadline: timestamp("application_deadline"),
  projectStartDate: date("project_start_date"),
  projectEndDate: date("project_end_date"),
  applicationUrl: text("application_url"),
  contactInfo: jsonb("contact_info").default({}),
  tags: jsonb("tags").default([]),
  geographicScope: jsonb("geographic_scope").default({}),
  targetGroups: jsonb("target_groups").default({}),
  documents: jsonb("documents").default({}),
  selectionCriteria: jsonb("selection_criteria").default({}),
  reportingRequirements: jsonb("reporting_requirements").default({}),
  priority: integer("priority").default(5),
  viewCount: bigint("view_count", { mode: "number" }).default(0),
  applicationCount: integer("application_count").default(0),
  isVerified: boolean("is_verified").default(false),
  verificationDate: timestamp("verification_date"),
  verifiedBy: uuid("verified_by").references(() => systemUsers.id),
  sourceUrl: text("source_url"),
  sourceType: varchar("source_type", { length: 50 }),
  scrapedAt: timestamp("scraped_at"),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const funders = pgTable("funders", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  legalName: varchar("legal_name", { length: 255 }),
  type: varchar("type", { length: 50 }).notNull(),
  subType: varchar("sub_type", { length: 50 }),
  website: text("website"),
  email: varchar("email", { length: 255 }),
  phone: varchar("phone", { length: 50 }),
  description: text("description"),
  foundedYear: integer("founded_year"),
  totalFunding: decimal("total_funding", { precision: 20, scale: 2 }),
  activeGrants: integer("active_grants").default(0),
  focusAreas: jsonb("focus_areas").default({}),
  geographicFocus: jsonb("geographic_focus").default({}),
  eligibilityRules: jsonb("eligibility_rules").default({}),
  applicationProcess: jsonb("application_process").default({}),
  contactInfo: jsonb("contact_info").default({}),
  socialMedia: jsonb("social_media").default({}),
  partnerships: jsonb("partnerships").default({}),
  reputation: real("reputation").default(0),
  reliability: real("reliability").default(0),
  responseTime: integer("response_time"),
  isActive: boolean("is_active").default(true),
  isVerified: boolean("is_verified").default(false),
  lastActive: timestamp("last_active"),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const fundingApplications = pgTable("funding_applications", {
  id: uuid("id").primaryKey().defaultRandom(),
  opportunityId: uuid("opportunity_id").references(() => fundingOpportunities.id).notNull(),
  applicantId: uuid("applicant_id").references(() => organizations.id).notNull(),
  submittedBy: uuid("submitted_by").references(() => systemUsers.id).notNull(),
  title: varchar("title", { length: 500 }),
  description: text("description"),
  requestedAmount: decimal("requested_amount", { precision: 15, scale: 2 }),
  currency: varchar("currency", { length: 10 }).default("USD"),
  projectDuration: integer("project_duration"),
  status: varchar("status", { length: 50 }).default("draft"),
  stage: varchar("stage", { length: 50 }).default("preparation"),
  submissionDate: timestamp("submission_date"),
  lastModified: timestamp("last_modified").defaultNow(),
  dueDate: timestamp("due_date"),
  reviewStartDate: timestamp("review_start_date"),
  decisionDate: timestamp("decision_date"),
  projectData: jsonb("project_data").default({}),
  budget: jsonb("budget").default({}),
  timeline: jsonb("timeline").default({}),
  team: jsonb("team").default({}),
  documents: jsonb("documents").default({}),
  reviews: jsonb("reviews").default({}),
  feedback: jsonb("feedback").default({}),
  score: real("score"),
  ranking: integer("ranking"),
  notes: text("notes"),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const grants = pgTable("grants", {
  id: uuid("id").primaryKey().defaultRandom(),
  applicationId: uuid("application_id").references(() => fundingApplications.id).notNull(),
  grantNumber: varchar("grant_number", { length: 100 }).unique(),
  title: varchar("title", { length: 500 }),
  funderId: uuid("funder_id").references(() => funders.id).notNull(),
  recipientId: uuid("recipient_id").references(() => organizations.id).notNull(),
  totalAmount: decimal("total_amount", { precision: 15, scale: 2 }).notNull(),
  disbursedAmount: decimal("disbursed_amount", { precision: 15, scale: 2 }).default(0),
  remainingAmount: decimal("remaining_amount", { precision: 15, scale: 2 }),
  currency: varchar("currency", { length: 10 }).default("USD"),
  startDate: date("start_date").notNull(),
  endDate: date("end_date").notNull(),
  status: varchar("status", { length: 50 }).default("active"),
  conditions: jsonb("conditions").default({}),
  milestones: jsonb("milestones").default({}),
  reportingSchedule: jsonb("reporting_schedule").default({}),
  disbursementSchedule: jsonb("disbursement_schedule").default({}),
  restrictions: jsonb("restrictions").default({}),
  performance: jsonb("performance").default({}),
  compliance: jsonb("compliance").default({}),
  documents: jsonb("documents").default({}),
  contacts: jsonb("contacts").default({}),
  renewalEligible: boolean("renewal_eligible").default(false),
  renewalDate: date("renewal_date"),
  closeoutDate: date("closeout_date"),
  finalReport: jsonb("final_report").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// ============================================================================
// PROJECT & PROGRAM MANAGEMENT
// ============================================================================

export const projects = pgTable("projects", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  organizationId: uuid("organization_id").references(() => organizations.id).notNull(),
  managerId: uuid("manager_id").references(() => systemUsers.id),
  grantId: uuid("grant_id").references(() => grants.id),
  type: varchar("type", { length: 50 }),
  category: varchar("category", { length: 100 }),
  status: varchar("status", { length: 50 }).default("planning"),
  priority: varchar("priority", { length: 20 }).default("medium"),
  startDate: date("start_date"),
  endDate: date("end_date"),
  actualStartDate: date("actual_start_date"),
  actualEndDate: date("actual_end_date"),
  budget: decimal("budget", { precision: 15, scale: 2 }),
  spentAmount: decimal("spent_amount", { precision: 15, scale: 2 }).default(0),
  currency: varchar("currency", { length: 10 }).default("USD"),
  progress: real("progress").default(0),
  objectives: jsonb("objectives").default({}),
  outcomes: jsonb("outcomes").default({}),
  beneficiaries: jsonb("beneficiaries").default({}),
  stakeholders: jsonb("stakeholders").default({}),
  risks: jsonb("risks").default({}),
  activities: jsonb("activities").default({}),
  resources: jsonb("resources").default({}),
  timeline: jsonb("timeline").default({}),
  reports: jsonb("reports").default({}),
  documents: jsonb("documents").default({}),
  geolocation: jsonb("geolocation").default({}),
  impact: jsonb("impact").default({}),
  sustainability: jsonb("sustainability").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
  createdBy: uuid("created_by").references(() => systemUsers.id),
});

export const projectTeams = pgTable("project_teams", {
  id: uuid("id").primaryKey().defaultRandom(),
  projectId: uuid("project_id").references(() => projects.id).notNull(),
  userId: uuid("user_id").references(() => systemUsers.id).notNull(),
  role: varchar("role", { length: 50 }).notNull(),
  responsibilities: jsonb("responsibilities").default({}),
  permissions: jsonb("permissions").default({}),
  allocation: real("allocation").default(100),
  startDate: date("start_date"),
  endDate: date("end_date"),
  isActive: boolean("is_active").default(true),
  performance: jsonb("performance").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
});

export const projectMilestones = pgTable("project_milestones", {
  id: uuid("id").primaryKey().defaultRandom(),
  projectId: uuid("project_id").references(() => projects.id).notNull(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  type: varchar("type", { length: 50 }),
  status: varchar("status", { length: 50 }).default("pending"),
  dueDate: date("due_date"),
  completedDate: date("completed_date"),
  weight: real("weight").default(1),
  deliverables: jsonb("deliverables").default({}),
  criteria: jsonb("criteria").default({}),
  dependencies: jsonb("dependencies").default({}),
  assignedTo: uuid("assigned_to").references(() => systemUsers.id),
  reviewedBy: uuid("reviewed_by").references(() => systemUsers.id),
  feedback: text("feedback"),
  documents: jsonb("documents").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// ============================================================================
// AI & AUTOMATION SYSTEMS
// ============================================================================

export const aiInteractions = pgTable("ai_interactions", {
  id: uuid("id").primaryKey().defaultRandom(),
  userId: uuid("user_id").references(() => systemUsers.id),
  sessionId: text("session_id"),
  interactionType: varchar("interaction_type", { length: 100 }).notNull(),
  input: text("input"),
  output: text("output"),
  model: varchar("model", { length: 100 }),
  provider: varchar("provider", { length: 50 }),
  tokensUsed: integer("tokens_used"),
  cost: decimal("cost", { precision: 10, scale: 6 }),
  responseTime: integer("response_time"),
  quality: real("quality"),
  satisfaction: integer("satisfaction"),
  feedback: text("feedback"),
  context: jsonb("context").default({}),
  parameters: jsonb("parameters").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
});

export const automationRules = pgTable("automation_rules", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  type: varchar("type", { length: 50 }).notNull(),
  trigger: jsonb("trigger").notNull(),
  conditions: jsonb("conditions").default({}),
  actions: jsonb("actions").notNull(),
  isActive: boolean("is_active").default(true),
  priority: integer("priority").default(5),
  executionCount: bigint("execution_count", { mode: "number" }).default(0),
  lastExecuted: timestamp("last_executed"),
  nextExecution: timestamp("next_execution"),
  errorCount: integer("error_count").default(0),
  lastError: text("last_error"),
  configuration: jsonb("configuration").default({}),
  schedule: jsonb("schedule").default({}),
  limits: jsonb("limits").default({}),
  monitoring: jsonb("monitoring").default({}),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
  createdBy: uuid("created_by").references(() => systemUsers.id),
});

export const aiModels = pgTable("ai_models", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: varchar("name", { length: 255 }).notNull(),
  provider: varchar("provider", { length: 100 }),
  version: varchar("version", { length: 50 }),
  type: varchar("type", { length: 50 }),
  capabilities: jsonb("capabilities").default({}),
  limitations: jsonb("limitations").default({}),
  pricing: jsonb("pricing").default({}),
  performance: jsonb("performance").default({}),
  configuration: jsonb("configuration").default({}),
  isActive: boolean("is_active").default(true),
  isDefault: boolean("is_default").default(false),
  totalUsage: bigint("total_usage", { mode: "number" }).default(0),
  totalCost: decimal("total_cost", { precision: 15, scale: 2 }).default(0),
  averageResponseTime: real("average_response_time"),
  successRate: real("success_rate").default(1),
  lastUsed: timestamp("last_used"),
  metadata: jsonb("metadata").default({}),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Continue in next part due to length...