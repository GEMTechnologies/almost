import fetch from 'node-fetch';

export interface DeepSeekGenerationRequest {
  documentType: string;
  sectionTitle: string;
  sectionId: string;
  organizationContext: {
    name: string;
    type: string;
    sector: string;
    country: string;
    size?: string;
    focus?: string;
  };
  documentSettings: {
    tone: string;
    complexity: string;
    includeExamples: boolean;
    includeProcedures: boolean;
    complianceLevel: string;
  };
  existingSections: Array<{
    title: string;
    content: string;
  }>;
}

export interface DeepSeekResponse {
  content: string;
  wordCount: number;
  quality: number;
}

export class DeepSeekService {
  private apiKey: string;
  private baseUrl = 'https://api.deepseek.com/v1/chat/completions';

  constructor() {
    this.apiKey = process.env.DEEPSEEK_API_KEY || 'sk-a56c233e8fa64e0bb77a264fac2dd68a';
  }

  async generateDocumentSection(request: DeepSeekGenerationRequest): Promise<DeepSeekResponse> {
    try {
      const systemPrompt = this.buildSystemPrompt(request);
      const userPrompt = this.buildUserPrompt(request);

      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: [
            {
              role: 'system',
              content: systemPrompt
            },
            {
              role: 'user',
              content: userPrompt
            }
          ],
          max_tokens: 2000,
          temperature: 0.7,
          stream: false
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`DeepSeek API error: ${response.status} - ${errorText}`);
      }

      const data = await response.json() as any;
      const content = data.choices[0]?.message?.content || '';

      if (!content) {
        throw new Error('No content generated by DeepSeek API');
      }

      const cleanContent = this.cleanGeneratedContent(content);
      const wordCount = cleanContent.split(' ').length;

      return {
        content: cleanContent,
        wordCount,
        quality: this.calculateQualityScore(cleanContent, request)
      };

    } catch (error) {
      console.error('DeepSeek API Error:', error);
      throw new Error(`Failed to generate content: ${error.message}`);
    }
  }

  private buildSystemPrompt(request: DeepSeekGenerationRequest): string {
    return `You are an expert NGO policy and documentation writer specializing in ${request.organizationContext.sector} sector organizations. 

Your task is to write professional, compliant, and implementable content for NGO documents that meet international standards.

Organization Context:
- Name: ${request.organizationContext.name}
- Type: ${request.organizationContext.type}
- Sector: ${request.organizationContext.sector}
- Country: ${request.organizationContext.country}
- Size: ${request.organizationContext.size || 'Medium'}
- Focus: ${request.organizationContext.focus || 'Community development'}

Writing Guidelines:
- Tone: ${request.documentSettings.tone}
- Complexity Level: ${request.documentSettings.complexity}
- Include Examples: ${request.documentSettings.includeExamples ? 'Yes' : 'No'}
- Include Procedures: ${request.documentSettings.includeProcedures ? 'Yes' : 'No'}
- Compliance Level: ${request.documentSettings.complianceLevel}

Requirements:
1. Write content that is specific to the organization context
2. Ensure compliance with international NGO standards
3. Include practical implementation guidance
4. Use clear, professional language
5. Structure content with appropriate headings and bullet points
6. Reference relevant laws and regulations for ${request.organizationContext.country}
7. Make content actionable and implementable
8. Address donor requirements and best practices

Output Format:
- Provide only the section content without additional commentary
- Use professional formatting with clear structure
- Include specific procedures and guidelines
- Add relevant examples when requested
- Ensure content is between 300-800 words depending on section complexity`;
  }

  private buildUserPrompt(request: DeepSeekGenerationRequest): string {
    const existingContext = request.existingSections.length > 0 
      ? `\n\nExisting Sections Context:\n${request.existingSections.map(s => `${s.title}: ${s.content.substring(0, 200)}...`).join('\n')}`
      : '';

    return `Generate professional content for the following document section:

Document Type: ${request.documentType}
Section: ${request.sectionTitle}
Section ID: ${request.sectionId}

This section should be comprehensive, professional, and directly applicable to ${request.organizationContext.name}. 

Key Requirements:
- Address the specific needs of a ${request.organizationContext.type} in ${request.organizationContext.country}
- Include relevant compliance requirements
- Provide clear procedures and guidelines
- Make it actionable for staff implementation
- Ensure it aligns with donor expectations and international standards

${existingContext}

Please generate the complete section content now:`;
  }

  private cleanGeneratedContent(content: string): string {
    // Remove any markdown formatting and clean up the content
    let cleaned = content
      .replace(/```[\s\S]*?```/g, '') // Remove code blocks
      .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold markdown
      .replace(/\*(.*?)\*/g, '$1') // Remove italic markdown
      .replace(/#{1,6}\s/g, '') // Remove markdown headers
      .replace(/\n{3,}/g, '\n\n') // Normalize line breaks
      .trim();

    return cleaned;
  }

  private calculateQualityScore(content: string, request: DeepSeekGenerationRequest): number {
    let score = 70; // Base score

    // Check content length (optimal 300-800 words)
    const wordCount = content.split(' ').length;
    if (wordCount >= 300 && wordCount <= 800) score += 10;
    else if (wordCount >= 200) score += 5;

    // Check for structure (bullet points, numbered lists)
    if (content.includes('â€¢') || content.includes('-') || /\d+\./.test(content)) score += 5;

    // Check for organization-specific content
    if (content.includes(request.organizationContext.name)) score += 5;
    if (content.includes(request.organizationContext.country)) score += 5;

    // Check for compliance language
    if (content.toLowerCase().includes('compliance') || 
        content.toLowerCase().includes('procedure') ||
        content.toLowerCase().includes('policy')) score += 5;

    return Math.min(100, score);
  }

  async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: [{ role: 'user', content: 'Test' }],
          max_tokens: 10
        })
      });
      return response.ok;
    } catch {
      return false;
    }
  }
}

export const deepSeekService = new DeepSeekService();